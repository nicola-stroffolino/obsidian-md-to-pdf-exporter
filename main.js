/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => MyPlugin
});
var import_fs = __toModule(require("fs"));
var import_obsidian = __toModule(require("obsidian"));
var import_path = __toModule(require("path"));
var import_child_process = __toModule(require("child_process"));
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      const ribbonIconEl = this.addRibbonIcon("dice", "PROVA", (evt) => __async(this, null, function* () {
        const preamble = [
          "\\usepackage{tikz}",
          "\\usetikzlibrary{calc,patterns,positioning,matrix,plotmarks,trees,shapes,decorations}",
          "\\usepackage{color,soul,soulutf8}"
        ];
        const running = this.app;
        const { basePath } = running.vault.adapter;
        const dummy_partialPath = ".obsidian/plugins/obsidian-md-to-pdf-exporter/files/dummy.md";
        const template_partialPath = ".obsidian/plugins/obsidian-md-to-pdf-exporter/templates/eisvogel";
        let activeFile = running.workspace.getActiveFile();
        if (!activeFile)
          return console.log("No file currently open.");
        let text = (yield running.vault.read(activeFile)).split("\n");
        new import_obsidian.Notice(`Exporting to PDF...`);
        const outputFilePath_complete = (0, import_path.join)(basePath, dummy_partialPath);
        yield this.resetFile(outputFilePath_complete);
        yield this.writeFile(outputFilePath_complete, yield this.headerize(preamble));
        let anInteger = 0;
        let i = 0;
        while (text[i].trim().length === 0)
          i++;
        if (text[i].trimStart().trimEnd() == "---")
          text[i] = "";
        else
          text[i] = "---\n\n" + text[i];
        for (let found = false; i < text.length; i++) {
          if (text[i].contains("`")) {
            if (text[i].contains("tikz render")) {
              let tmp = text[i].split(" ").last();
              text[i] = "\\begin{center}\\begin{tikzpicture}";
              if (tmp.startsWith("scale="))
                text[i] += `[${tmp}, transform shape]`;
              found = true;
            } else if (found && text[i].trimStart().trimEnd() == "```") {
              text[i] = "\\end{tikzpicture}\\end{center}";
              found = false;
            }
          } else if (!found) {
            text[i] = text[i].replace("<-->", "$\\longleftrightarrow$");
            text[i] = text[i].replace("<->", "$\\leftrightarrow$");
            text[i] = text[i].replace("--->", "$\\longrightarrow$");
            text[i] = text[i].replace("-->", "$\\longrightarrow$");
            text[i] = text[i].replace("->", "$\\rightarrow$");
            text[i] = text[i].replace("<---", "$\\longleftarrow$");
            text[i] = text[i].replace("<--", "$\\longleftarrow$");
            text[i] = text[i].replace("<-", "$\\leftarrow$");
            let index = text[i].search("=");
            if (index != -1) {
              if (text[i][index] == "\\" || text[i][index + 1] == "\\") {
                console.log(`Trovato un figlio di puttana alla riga ${i} colonna ${index}`);
              }
            }
            text[i] += "\n";
          }
          yield this.writeFile(outputFilePath_complete, text[i] + "\n");
        }
        const contents = (0, import_fs.readFileSync)(outputFilePath_complete, { encoding: "utf8", flag: "r" });
        console.log(contents);
        let command = ["pandoc", `"${outputFilePath_complete}"`, "-f", "markdown", "-t", "pdf", "-o", `"${basePath}/${activeFile.parent.path}${activeFile.basename}.pdf"`, "--template", `"${(0, import_path.join)(basePath, template_partialPath)}"`];
        (0, import_child_process.exec)(command.join(" "), (error, stdout, stderr) => {
          if (error) {
            console.log(`error: ${error.message}`);
            new import_obsidian.Notice(`Error: ${error.message}`);
            return;
          }
          if (stderr) {
            console.log(`stderr: ${stderr}`);
            new import_obsidian.Notice(`stderr: ${stderr}`);
            return;
          }
          console.log(`stdout: ${stdout}`);
          new import_obsidian.Notice("Succesfully exported to PDF.");
        });
      }));
    });
  }
  onunload() {
  }
  localize(str, char, char1, start, end, charNum) {
    let chars = [...str];
    let call = false;
    for (let r = 0, pass = 0, oldpass = 0; r < chars.length - 1; r++) {
      if (chars[r] == "\\" && (chars[r + 1] == char || chars[r + 1] == char1)) {
        if (oldpass != 1)
          pass = 1;
        chars[r] = "";
        r++;
      } else if (charNum == 2) {
        if (chars[r] == char && chars[r + 1] == char || chars[r] == char1 && chars[r + 1] == char1) {
          oldpass = pass;
          if (pass == 1) {
            pass = 0;
          } else {
            call = true;
            chars[r] = start;
            chars[++r] = "";
            r++;
            for (; r < chars.length - 1; r++) {
              if (chars[r] == char && chars[r + 1] == char || chars[r] == char1 && chars[r + 1] == char1) {
                chars[r] = end;
                chars[r + 1] = "";
                break;
              }
            }
          }
        }
      } else if (charNum == 1) {
        if (chars[r] == char) {
          oldpass = pass;
          if (pass == 1) {
            pass = 0;
          } else {
            call = true;
            chars[r] = start;
            r++;
            for (; r < chars.length - 1; r++) {
              if (chars[r] == char) {
                chars[r] = end;
                break;
              }
            }
          }
        }
      }
    }
    let ret = chars.join("");
    if (char === "=" && call) {
      ret = this.localize(this.localize(ret, "*", "_", "\\textbf{", "}", 2), "*", "_", "\\textit{", "}", 1);
    }
    return ret;
  }
  writeFile(outputDir, data) {
    return __async(this, null, function* () {
      try {
        yield import_fs.promises.writeFile(outputDir, data, { flag: "a+" });
        return;
      } catch (err) {
        return console.log(err);
      }
    });
  }
  resetFile(outputDir) {
    return __async(this, null, function* () {
      try {
        yield import_fs.promises.truncate(outputDir, 0);
        return;
      } catch (err) {
        return console.log(err);
      }
    });
  }
  headerize(packageArr) {
    return __async(this, null, function* () {
      let header = "---\nheader-includes:\n";
      for (let i = 0; i < packageArr.length; i++) {
        header += "- " + packageArr[i] + "\n";
      }
      return header;
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
